type token =
  | EOF
  | FUN
  | GT
  | EQ
  | LT
  | LPAREN
  | RPAREN
  | DOT
  | COMMA
  | TRUE
  | FALSE
  | AND
  | OR
  | LET
  | IN
  | IF
  | THEN
  | ELSE
  | WITH
  | LAMBDA
  | NIL
  | CONS
  | HEAD
  | TAIL
  | ISNIL
  | TYINT
  | TYLIST
  | THINARROW
  | COLON
  | LBRACK
  | RBRACK
  | PLUS
  | SUB
  | TIMES
  | APP
  | NUMBER of (int)
  | ID of (string)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Ast
let mk_lambdas (xs : (string * typ option) list) (e : expr) =
  let f (x, topt) e' = Lambda(x, topt, e') in
  List.fold_right f xs e
let syntax_error () =
  let start_pos = Parsing.rhs_start_pos 1 in
  let end_pos = Parsing.rhs_end_pos 1 in
  let sl = start_pos.pos_lnum
  and sc = start_pos.pos_cnum - start_pos.pos_bol
  and el = end_pos.pos_lnum
  and ec = end_pos.pos_cnum - end_pos.pos_bol in
  failwith (Printf.sprintf "Syntax error: %d.%d-%d.%d" sl sc el ec)
# 56 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  257 (* FUN *);
  258 (* GT *);
  259 (* EQ *);
  260 (* LT *);
  261 (* LPAREN *);
  262 (* RPAREN *);
  263 (* DOT *);
  264 (* COMMA *);
  265 (* TRUE *);
  266 (* FALSE *);
  267 (* AND *);
  268 (* OR *);
  269 (* LET *);
  270 (* IN *);
  271 (* IF *);
  272 (* THEN *);
  273 (* ELSE *);
  274 (* WITH *);
  275 (* LAMBDA *);
  276 (* NIL *);
  277 (* CONS *);
  278 (* HEAD *);
  279 (* TAIL *);
  280 (* ISNIL *);
  281 (* TYINT *);
  282 (* TYLIST *);
  283 (* THINARROW *);
  284 (* COLON *);
  285 (* LBRACK *);
  286 (* RBRACK *);
  287 (* PLUS *);
  288 (* SUB *);
  289 (* TIMES *);
  290 (* APP *);
    0|]

let yytransl_block = [|
  291 (* NUMBER *);
  292 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\004\000\004\000\005\000\005\000\006\000\006\000\
\002\000\002\000\007\000\007\000\008\000\008\000\009\000\009\000\
\003\000\003\000\003\000\003\000\003\000\003\000\012\000\012\000\
\012\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\011\000\011\000\011\000\011\000\011\000\011\000\
\000\000\000\000"

let yylen = "\002\000\
\002\000\002\000\001\000\003\000\001\000\003\000\004\000\001\000\
\003\000\001\000\003\000\001\000\001\000\003\000\003\000\000\000\
\004\000\008\000\006\000\006\000\001\000\001\000\001\000\001\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\001\000\002\000\002\000\002\000\003\000\002\000\
\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\024\000\023\000\041\000\
\000\000\021\000\000\000\035\000\000\000\005\000\000\000\042\000\
\008\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\025\000\000\000\000\000\000\000\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\
\009\000\011\000\000\000\000\000\000\000\014\000\000\000\015\000\
\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yydgoto = "\003\000\
\016\000\024\000\017\000\000\000\025\000\026\000\033\000\034\000\
\036\000\018\000\019\000\020\000"

let yysindex = "\009\000\
\057\255\253\254\000\000\018\000\220\254\090\255\220\254\090\255\
\220\254\246\254\062\255\062\255\062\255\000\000\000\000\000\000\
\226\000\000\000\062\255\000\000\253\254\000\000\251\254\000\000\
\000\000\254\254\000\000\255\254\010\255\117\255\053\255\140\255\
\032\255\061\255\253\254\000\000\049\255\049\255\062\255\000\000\
\090\255\090\255\090\255\090\255\090\255\090\255\090\255\090\255\
\090\255\037\255\068\255\253\254\253\254\253\254\220\254\000\000\
\090\255\090\255\220\254\090\255\045\255\011\255\011\255\011\255\
\010\001\010\001\066\255\239\254\239\254\066\255\000\000\048\255\
\000\000\000\000\093\255\163\255\186\255\000\000\225\255\000\000\
\000\000\090\255\090\255\090\255\202\255\225\255\225\255\090\255\
\225\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\141\000\000\000\000\000\000\000\000\000\000\000\
\000\000\153\000\000\000\023\255\000\000\000\000\000\000\000\000\
\014\255\000\000\000\000\000\000\036\000\071\000\164\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\106\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\049\001\065\001\081\001\
\083\000\118\000\187\000\249\000\016\001\210\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\013\000\000\000\
\000\000\000\000\000\000\000\000\000\000\029\000\045\000\000\000\
\099\000"

let yygindex = "\000\000\
\000\000\241\255\006\000\000\000\000\000\000\000\254\255\010\000\
\000\000\000\000\252\255\000\000"

let yytablesize = 610
let yytable = "\028\000\
\016\000\021\000\029\000\046\000\031\000\051\000\037\000\038\000\
\039\000\001\000\002\000\030\000\017\000\032\000\050\000\049\000\
\013\000\027\000\035\000\061\000\013\000\022\000\023\000\052\000\
\053\000\012\000\054\000\055\000\020\000\012\000\012\000\046\000\
\050\000\050\000\050\000\036\000\072\000\073\000\074\000\059\000\
\012\000\047\000\048\000\049\000\019\000\050\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\057\000\
\004\000\005\000\011\000\012\000\013\000\006\000\076\000\077\000\
\075\000\079\000\006\000\060\000\078\000\007\000\037\000\008\000\
\013\000\071\000\080\000\009\000\010\000\081\000\011\000\012\000\
\013\000\010\000\032\000\011\000\012\000\013\000\046\000\085\000\
\086\000\087\000\005\000\014\000\015\000\089\000\006\000\082\000\
\014\000\015\000\018\000\000\000\000\000\000\000\007\000\000\000\
\008\000\040\000\000\000\000\000\009\000\010\000\000\000\011\000\
\012\000\013\000\000\000\000\000\000\000\033\000\041\000\042\000\
\043\000\000\000\056\000\000\000\014\000\015\000\000\000\044\000\
\045\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\046\000\000\000\000\000\022\000\041\000\042\000\043\000\
\000\000\000\000\000\000\047\000\048\000\049\000\044\000\045\000\
\010\000\000\000\000\000\058\000\000\000\000\000\000\000\000\000\
\046\000\000\000\000\000\038\000\041\000\042\000\043\000\000\000\
\000\000\000\000\047\000\048\000\049\000\044\000\045\000\000\000\
\083\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
\000\000\000\000\034\000\041\000\042\000\043\000\000\000\000\000\
\000\000\047\000\048\000\049\000\044\000\045\000\000\000\000\000\
\000\000\000\000\084\000\041\000\042\000\043\000\046\000\000\000\
\000\000\028\000\000\000\000\000\044\000\045\000\000\000\088\000\
\047\000\048\000\049\000\000\000\000\000\000\000\046\000\000\000\
\000\000\040\000\041\000\042\000\043\000\000\000\000\000\000\000\
\047\000\048\000\049\000\044\000\045\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\046\000\000\000\000\000\
\026\000\000\000\000\000\000\000\000\000\000\000\000\000\047\000\
\048\000\049\000\016\000\016\000\016\000\016\000\016\000\000\000\
\000\000\000\000\000\000\016\000\016\000\000\000\016\000\027\000\
\016\000\016\000\017\000\000\000\016\000\016\000\016\000\016\000\
\016\000\000\000\017\000\000\000\017\000\017\000\000\000\016\000\
\016\000\016\000\020\000\016\000\016\000\036\000\036\000\036\000\
\036\000\036\000\020\000\000\000\020\000\020\000\036\000\036\000\
\030\000\036\000\019\000\036\000\036\000\000\000\000\000\036\000\
\036\000\000\000\019\000\000\000\019\000\019\000\000\000\000\000\
\031\000\000\000\036\000\036\000\036\000\000\000\036\000\036\000\
\037\000\037\000\037\000\037\000\037\000\000\000\000\000\000\000\
\029\000\037\000\037\000\000\000\037\000\000\000\037\000\037\000\
\032\000\000\000\037\000\037\000\000\000\032\000\032\000\000\000\
\032\000\000\000\032\000\032\000\000\000\037\000\037\000\037\000\
\018\000\037\000\037\000\040\000\040\000\040\000\040\000\040\000\
\018\000\000\000\018\000\018\000\040\000\040\000\000\000\040\000\
\000\000\040\000\040\000\033\000\000\000\040\000\040\000\000\000\
\033\000\033\000\000\000\033\000\000\000\033\000\033\000\000\000\
\040\000\040\000\040\000\000\000\040\000\040\000\022\000\022\000\
\022\000\000\000\022\000\000\000\000\000\000\000\000\000\022\000\
\022\000\000\000\022\000\010\000\022\000\022\000\010\000\010\000\
\010\000\022\000\000\000\000\000\000\000\038\000\038\000\038\000\
\000\000\038\000\010\000\022\000\022\000\022\000\038\000\038\000\
\000\000\038\000\000\000\038\000\038\000\000\000\010\000\000\000\
\038\000\000\000\000\000\000\000\034\000\034\000\034\000\000\000\
\034\000\000\000\038\000\038\000\038\000\034\000\034\000\000\000\
\034\000\000\000\034\000\034\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\028\000\028\000\028\000\000\000\028\000\
\000\000\034\000\034\000\034\000\028\000\028\000\000\000\028\000\
\000\000\028\000\028\000\041\000\042\000\043\000\000\000\000\000\
\000\000\000\000\000\000\000\000\044\000\045\000\000\000\000\000\
\028\000\028\000\028\000\000\000\000\000\000\000\046\000\000\000\
\000\000\000\000\026\000\026\000\026\000\000\000\026\000\000\000\
\047\000\048\000\049\000\026\000\026\000\000\000\026\000\000\000\
\026\000\026\000\000\000\041\000\042\000\043\000\000\000\000\000\
\000\000\027\000\027\000\027\000\000\000\027\000\000\000\026\000\
\026\000\000\000\027\000\027\000\000\000\027\000\046\000\027\000\
\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\047\000\048\000\049\000\000\000\000\000\000\000\027\000\027\000\
\000\000\000\000\030\000\030\000\030\000\000\000\030\000\000\000\
\000\000\000\000\000\000\030\000\030\000\000\000\030\000\000\000\
\030\000\030\000\031\000\031\000\031\000\000\000\031\000\000\000\
\000\000\000\000\000\000\031\000\031\000\000\000\031\000\000\000\
\031\000\031\000\029\000\029\000\029\000\000\000\029\000\000\000\
\000\000\000\000\000\000\029\000\029\000\000\000\029\000\000\000\
\029\000\029\000"

let yycheck = "\036\001\
\000\000\005\001\005\000\021\001\007\000\021\000\011\000\012\000\
\013\000\001\000\002\000\006\000\000\000\008\000\019\000\033\001\
\003\001\000\000\029\001\035\000\007\001\025\001\026\001\029\001\
\027\001\003\001\028\001\018\001\000\000\007\001\008\001\021\001\
\037\000\038\000\039\000\000\000\052\000\053\000\054\000\008\001\
\018\001\031\001\032\001\033\001\000\000\050\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\049\000\003\001\
\000\001\001\001\022\001\023\001\024\001\005\001\057\000\058\000\
\055\000\060\000\005\001\007\001\059\000\013\001\000\000\015\001\
\024\001\006\001\030\001\019\001\020\001\030\001\022\001\023\001\
\024\001\020\001\000\000\022\001\023\001\024\001\021\001\082\000\
\083\000\084\000\001\001\035\001\036\001\088\000\005\001\003\001\
\035\001\036\001\000\000\255\255\255\255\255\255\013\001\255\255\
\015\001\000\000\255\255\255\255\019\001\020\001\255\255\022\001\
\023\001\024\001\255\255\255\255\255\255\000\000\002\001\003\001\
\004\001\255\255\006\001\255\255\035\001\036\001\255\255\011\001\
\012\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\021\001\255\255\255\255\000\000\002\001\003\001\004\001\
\255\255\255\255\255\255\031\001\032\001\033\001\011\001\012\001\
\000\000\255\255\255\255\016\001\255\255\255\255\255\255\255\255\
\021\001\255\255\255\255\000\000\002\001\003\001\004\001\255\255\
\255\255\255\255\031\001\032\001\033\001\011\001\012\001\255\255\
\014\001\255\255\255\255\255\255\255\255\255\255\255\255\021\001\
\255\255\255\255\000\000\002\001\003\001\004\001\255\255\255\255\
\255\255\031\001\032\001\033\001\011\001\012\001\255\255\255\255\
\255\255\255\255\017\001\002\001\003\001\004\001\021\001\255\255\
\255\255\000\000\255\255\255\255\011\001\012\001\255\255\014\001\
\031\001\032\001\033\001\255\255\255\255\255\255\021\001\255\255\
\255\255\000\000\002\001\003\001\004\001\255\255\255\255\255\255\
\031\001\032\001\033\001\011\001\012\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\031\001\
\032\001\033\001\002\001\003\001\004\001\005\001\006\001\255\255\
\255\255\255\255\255\255\011\001\012\001\255\255\014\001\000\000\
\016\001\017\001\006\001\255\255\020\001\021\001\022\001\023\001\
\024\001\255\255\014\001\255\255\016\001\017\001\255\255\031\001\
\032\001\033\001\006\001\035\001\036\001\002\001\003\001\004\001\
\005\001\006\001\014\001\255\255\016\001\017\001\011\001\012\001\
\000\000\014\001\006\001\016\001\017\001\255\255\255\255\020\001\
\021\001\255\255\014\001\255\255\016\001\017\001\255\255\255\255\
\000\000\255\255\031\001\032\001\033\001\255\255\035\001\036\001\
\002\001\003\001\004\001\005\001\006\001\255\255\255\255\255\255\
\000\000\011\001\012\001\255\255\014\001\255\255\016\001\017\001\
\006\001\255\255\020\001\021\001\255\255\011\001\012\001\255\255\
\014\001\255\255\016\001\017\001\255\255\031\001\032\001\033\001\
\006\001\035\001\036\001\002\001\003\001\004\001\005\001\006\001\
\014\001\255\255\016\001\017\001\011\001\012\001\255\255\014\001\
\255\255\016\001\017\001\006\001\255\255\020\001\021\001\255\255\
\011\001\012\001\255\255\014\001\255\255\016\001\017\001\255\255\
\031\001\032\001\033\001\255\255\035\001\036\001\002\001\003\001\
\004\001\255\255\006\001\255\255\255\255\255\255\255\255\011\001\
\012\001\255\255\014\001\003\001\016\001\017\001\006\001\007\001\
\008\001\021\001\255\255\255\255\255\255\002\001\003\001\004\001\
\255\255\006\001\018\001\031\001\032\001\033\001\011\001\012\001\
\255\255\014\001\255\255\016\001\017\001\255\255\030\001\255\255\
\021\001\255\255\255\255\255\255\002\001\003\001\004\001\255\255\
\006\001\255\255\031\001\032\001\033\001\011\001\012\001\255\255\
\014\001\255\255\016\001\017\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\002\001\003\001\004\001\255\255\006\001\
\255\255\031\001\032\001\033\001\011\001\012\001\255\255\014\001\
\255\255\016\001\017\001\002\001\003\001\004\001\255\255\255\255\
\255\255\255\255\255\255\255\255\011\001\012\001\255\255\255\255\
\031\001\032\001\033\001\255\255\255\255\255\255\021\001\255\255\
\255\255\255\255\002\001\003\001\004\001\255\255\006\001\255\255\
\031\001\032\001\033\001\011\001\012\001\255\255\014\001\255\255\
\016\001\017\001\255\255\002\001\003\001\004\001\255\255\255\255\
\255\255\002\001\003\001\004\001\255\255\006\001\255\255\031\001\
\032\001\255\255\011\001\012\001\255\255\014\001\021\001\016\001\
\017\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\031\001\032\001\033\001\255\255\255\255\255\255\031\001\032\001\
\255\255\255\255\002\001\003\001\004\001\255\255\006\001\255\255\
\255\255\255\255\255\255\011\001\012\001\255\255\014\001\255\255\
\016\001\017\001\002\001\003\001\004\001\255\255\006\001\255\255\
\255\255\255\255\255\255\011\001\012\001\255\255\014\001\255\255\
\016\001\017\001\002\001\003\001\004\001\255\255\006\001\255\255\
\255\255\255\255\255\255\011\001\012\001\255\255\014\001\255\255\
\016\001\017\001"

let yynames_const = "\
  EOF\000\
  FUN\000\
  GT\000\
  EQ\000\
  LT\000\
  LPAREN\000\
  RPAREN\000\
  DOT\000\
  COMMA\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  LET\000\
  IN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WITH\000\
  LAMBDA\000\
  NIL\000\
  CONS\000\
  HEAD\000\
  TAIL\000\
  ISNIL\000\
  TYINT\000\
  TYLIST\000\
  THINARROW\000\
  COLON\000\
  LBRACK\000\
  RBRACK\000\
  PLUS\000\
  SUB\000\
  TIMES\000\
  APP\000\
  "

let yynames_block = "\
  NUMBER\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 48 "parser.mly"
               ( _1 )
# 375 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 49 "parser.mly"
                ( syntax_error () )
# 381 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 52 "parser.mly"
                      ( [_1] )
# 388 "parser.ml"
               : 'idlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'idlist) in
    Obj.repr(
# 53 "parser.mly"
                      ( _1 :: _3 )
# 396 "parser.ml"
               : 'idlist))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
            ( TInt )
# 402 "parser.ml"
               : 'ty_atom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.typ) in
    Obj.repr(
# 57 "parser.mly"
                       ( _2 )
# 409 "parser.ml"
               : 'ty_atom))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ast.typ) in
    Obj.repr(
# 60 "parser.mly"
                              ( TList _3 )
# 416 "parser.ml"
               : 'ty_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ty_atom) in
    Obj.repr(
# 61 "parser.mly"
              ( _1 )
# 423 "parser.ml"
               : 'ty_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ty_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.typ) in
    Obj.repr(
# 64 "parser.mly"
                           ( TFun (_1, _3) )
# 431 "parser.ml"
               : Ast.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ty_expr) in
    Obj.repr(
# 65 "parser.mly"
              ( _1 )
# 438 "parser.ml"
               : Ast.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.typ) in
    Obj.repr(
# 68 "parser.mly"
                  ( (_1, Some _3) )
# 446 "parser.ml"
               : 'bind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 69 "parser.mly"
         ( (_1, None) )
# 453 "parser.ml"
               : 'bind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bind) in
    Obj.repr(
# 72 "parser.mly"
                          ( [_1] )
# 460 "parser.ml"
               : 'bindlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bind) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bindlist) in
    Obj.repr(
# 73 "parser.mly"
                          ( _1 :: _3 )
# 468 "parser.ml"
               : 'bindlist))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.typ) in
    Obj.repr(
# 76 "parser.mly"
                       ( Some _2 )
# 475 "parser.ml"
               : 'tyarg_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
      ( None )
# 481 "parser.ml"
               : 'tyarg_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'bindlist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                                             ( mk_lambdas _2 _4 )
# 489 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'bind) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'bindlist) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                                             ( let (x, topt) = _2 in LetBind(x, topt, Fix (Lambda(x, topt, mk_lambdas _4 _6)), _8) )
# 499 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                                             ( IfThenElse(_2, _4, _6) )
# 508 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'bind) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                                             ( let (x, t) = _2 in LetBind(x, t, _4, _6) )
# 517 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binop) in
    Obj.repr(
# 88 "parser.mly"
                                             ( _1 )
# 524 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 89 "parser.mly"
                                             ( _1 )
# 531 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 92 "parser.mly"
                                          ( Var(_1) )
# 538 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 93 "parser.mly"
                                          ( NumLit(_1) )
# 545 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tyarg_opt) in
    Obj.repr(
# 94 "parser.mly"
                                          ( ListNil _2 )
# 552 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                                          ( Binop(_1, Add, _3) )
# 560 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                                          ( Binop(_1, Sub, _3) )
# 568 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                                          ( Binop(_1, Mul, _3) )
# 576 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                                          ( Binop(_1, Lt, _3) )
# 584 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                                          ( Binop(_1, Gt, _3) )
# 592 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                                          ( Binop(_1, Eq, _3) )
# 600 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 103 "parser.mly"
                                          ( Binop(_1, And, _3) )
# 608 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                                          ( Binop(_1, Or, _3) )
# 616 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                                          ( ListCons(_1, _3) )
# 624 "parser.ml"
               : 'binop))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atom) in
    Obj.repr(
# 108 "parser.mly"
                                          ( _1 )
# 631 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 109 "parser.mly"
                                          ( ListHead _2 )
# 638 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 110 "parser.mly"
                                          ( ListTail _2 )
# 645 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 111 "parser.mly"
                                          ( ListIsNil _2 )
# 652 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                                          ( _2 )
# 659 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 113 "parser.mly"
                                          ( App(_1, _2) )
# 667 "parser.ml"
               : 'term))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry ty *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.expr)
let ty (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Ast.typ)
